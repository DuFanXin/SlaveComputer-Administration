###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         25/Jul/2017  16:23:43 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È #
#                          \Projects\zstack\Samples\SampleApp\Source\SampleAp #
#                          p.c                                                #
#    Command line       =  -f "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂ #
#                          Êª¶È\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂ #
#                          Êª¶È\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO  #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00400000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Documents and           #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\Source\SampleApp.c" -D ZTOOL_P1  #
#                          -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D     #
#                          xLCD_SUPPORTED=DEBUG -lC "C:\Documents and         #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\CoordinatorEB\List\"    #
#                          -lA "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\Î #
#                          ÂÊª¶È\Projects\zstack\Samples\SampleApp\CC2530DB\C #
#                          oordinatorEB\List\" --diag_suppress Pe001,Pa010    #
#                          -o "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂ #
#                          Êª¶È\Projects\zstack\Samples\SampleApp\CC2530DB\Co #
#                          ordinatorEB\Obj\" -e --no_code_motion --debug      #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\" -I "C:\Documents and  #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\Source\" -I          #
#                          "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶ #
#                          È\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMain\TI2530DB\" -I "C:\Documents and          #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\" -I "C:\Documents and              #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\target\CC2530EB\" -I "C:\Documents and      #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\include\" -I "C:\Documents and              #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\high_level\" -I "C:\Documents and           #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\" -I "C:\Documents and      #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\single_chip\" -I            #
#                          "C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶ #
#                          È\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\mt\" -I "C:\Documents and     #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\osal\include\" -I "C:\Documents and             #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\" -I "C:\Documents and           #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\sdata\" -I "C:\Documents and           #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\af\" -I "C:\Documents and                 #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\nwk\" -I "C:\Documents and                #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sapi\" -I "C:\Documents and               #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sec\" -I "C:\Documents and                #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sys\" -I "C:\Documents and                #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\zdo\" -I "C:\Documents and                #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\" -I "C:\Documents and                     #
#                          Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\f8w\" -Ohz --require_prototypes            #
#    List file          =  C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coordi #
#                          natorEB\List\SampleApp.lst                         #
#    Object file        =  C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coordi #
#                          natorEB\Obj\SampleApp.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include "MT_UART.h"  // ´®¿Ú
     76          #include "MT.h"
     77          #include "DHT11.h"   //ÎÂÊª¶È×¨ÓÃ
     78          
     79          
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
     99          {
    100            SAMPLEAPP_PERIODIC_CLUSTERID,
    101            SAMPLEAPP_FLASH_CLUSTERID
    102          };
    103          

   \                                 In  segment XDATA_ROM_C, align 1
    104          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    105          {
    106            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    107            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    108            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    109            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    110            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    111            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    115          };
    116          
    117          // This is the Endpoint/Interface description.  It is defined here, but
    118          // filled-in in SampleApp_Init().  Another way to go would be to fill
    119          // in the structure here and make it a "const" (in code space).  The
    120          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * EXTERNAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL FUNCTIONS
    129           */
    130          
    131          /*********************************************************************
    132           * LOCAL VARIABLES
    133           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135                                    // This variable will be received when
    136                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 fire=0;
   \                     fire:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          unsigned long jiaoyan;
   \                     jiaoyan:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          unsigned char T[13];  
   \                     T:
   \   000000                DS 13
   \   00000D                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          unsigned char y[4];
   \                     y:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          bool r=0;
   \                     r:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          bool h=0;
   \                     h:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          uint8 c[3]={'q','3','1'};
   \                     `c`:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for c>`
   \   000003                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          char m;
   \                     m:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    157          
    158          
    159          
    160          
    161          
    162          
    163          
    164          
    165          /*********************************************************************
    166           * LOCAL FUNCTIONS
    167           */
    168          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    169          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    170          void SampleApp_SendPeriodicMessage( void );
    171          void SampleApp_SendFlashMessage( uint16 flashTime );
    172          //uint8 GetWendu(void);
    173          
    174          
    175          
    176          /*********************************************************************
    177           * NETWORK LAYER CALLBACKS
    178           */
    179          
    180          /*********************************************************************
    181           * PUBLIC FUNCTIONS
    182           */
    183          
    184          /*********************************************************************
    185           * @fn      SampleApp_Init
    186           *
    187           * @brief   Initialization function for the Generic App Task.
    188           *          This is called during initialization and should contain
    189           *          any application specific initialization (ie. hardware
    190           *          initialization/setup, table initialization, power up
    191           *          notificaiton ... ).
    192           *
    193           * @param   task_id - the ID assigned by OSAL.  This ID should be
    194           *                    used to send messages and set timers.
    195           *
    196           * @return  none
    197           */
    198          void SendKongkouInfor(uint8* msg);
    199          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          void SendKongkouInfor(uint8* msg)
   \                     SendKongkouInfor:
    201          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    202          uint8 len=sizeof(msg);
    203          afAddrType_t dstAddr;
    204          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    205          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000012   7409         MOV     A,#0x9
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine3 & 0xFFFF
    206          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    207          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    208                                 SAMPLEAPP_MY_CLUSTERID,
    209                                 len,  // ÏûÏ¢³¤¶È
    210                                 msg, // ÏûÏ¢ÄÚÈÝ
    211                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    212                                 AF_DISCV_ROUTE,
    213                                 AF_DEFAULT_RADIUS );	
   \                     ??CrossCallReturnLabel_0:
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000020   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   8A..         MOV     ?V0 + 0,R2
   \   00002A   8B..         MOV     ?V0 + 1,R3
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..02       MOV     ?V0 + 0,#0x2
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..03       MOV     ?V0 + 0,#0x3
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7920         MOV     R1,#0x20
   \   000046   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000048   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00004A   7409         MOV     A,#0x9
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
    214          		 // HalUARTWrite(0, "send kkou\n",10);
    215          
    216          }
   \   000055   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine28_0
   \   000004                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003                ; Setup parameters for call to function AF_DataRequest
   \   000003   75..1E       MOV     ?V0 + 0,#0x1e
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7414         MOV     A,#0x14
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   740C         MOV     A,#0xc
   \   000002                REQUIRE ??Subroutine34_0
   \   000002                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    217          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    219          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    220            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    221            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    222            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    223          
    224            MT_UartInit();  // ´®¿Ú³õÊ¼»¯
   \   000015                ; Setup parameters for call to function MT_UartInit
   \   000015   12....       LCALL   ??MT_UartInit?relay
    225            osal_set_event(SampleApp_TaskID, MY_SEND_UART); //ÉèÖÃÊÂ¼þ
   \   000018                ; Setup parameters for call to function osal_set_event
   \   000018   7A02         MOV     R2,#0x2
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   ??osal_set_event?relay
    226            osal_set_event(SampleApp_TaskID, MY_SEND2_UART); //ÉèÖÃÊÂ¼þ
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A04         MOV     R2,#0x4
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??osal_set_event?relay
    227            MT_UartRegisterTaskID(SampleApp_TaskID);  // ×¢²á£¬ÓÐ´®¿ÚÊÂ¼þÍ¨ÖªÎÒ
   \   000030                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000030   90....       MOV     DPTR,#SampleApp_TaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   ??MT_UartRegisterTaskID?relay
    228            
    229            //ÎÂÊª¶È´«¸ÐÆ÷³õÊ¼»¯ P0.6
    230             P0SEL &= 0xbf;
   \   000038   53F3BF       ANL     0xf3,#0xbf
    231          
    232           #if defined ( BUILD_ALL_DEVICES )
    233            if ( readCoordinatorJumper() )
    234              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    235            else
    236              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    237          #endif // BUILD_ALL_DEVICES
    238          
    239          #if defined ( HOLD_AUTO_START )
    240           
    241            ZDOInitDevice(0);
    242          #endif
    243          
    244            // Setup for the periodic message's destination address
    245            // Broadcast to everyone
    246            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00003B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00003E   740F         MOV     A,#0xf
   \   000040   F0           MOVX    @DPTR,A
    247            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000041   A3           INC     DPTR
   \   000042   7414         MOV     A,#0x14
   \   000044   F0           MOVX    @DPTR,A
    248            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000045   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000048   74FF         MOV     A,#-0x1
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   F0           MOVX    @DPTR,A
    249          
    250            // Setup for the flash command's destination address - Group 1
    251            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00004D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
    252            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000053   A3           INC     DPTR
   \   000054   7414         MOV     A,#0x14
   \   000056   F0           MOVX    @DPTR,A
    253            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000057   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00005A   7401         MOV     A,#0x1
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
    254          
    255            // Fill out the endpoint description.
    256            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000060   90....       MOV     DPTR,#SampleApp_epDesc
   \   000063   7414         MOV     A,#0x14
   \   000065   F0           MOVX    @DPTR,A
    257            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000066   A3           INC     DPTR
   \   000067   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00006D   F0           MOVX    @DPTR,A
    258            SampleApp_epDesc.simpleDesc
    259                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00006E   A3           INC     DPTR
   \   00006F   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000075   F0           MOVX    @DPTR,A
    260            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000076   A3           INC     DPTR
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
    261          
    262            // Register the endpoint description with the AF
    263            afRegister( &SampleApp_epDesc );
   \   000079                ; Setup parameters for call to function afRegister
   \   000079   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007B   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00007D   12....       LCALL   ??afRegister?relay
    264          
    265            // Register for all key events - This app will handle all key events
    266            RegisterForKeys( SampleApp_TaskID );
   \   000080                ; Setup parameters for call to function RegisterForKeys
   \   000080   90....       MOV     DPTR,#SampleApp_TaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??RegisterForKeys?relay
    267          
    268            // By default, all devices start out in Group 1
    269            SampleApp_Group.ID = 0x0001;
   \   000088   90....       MOV     DPTR,#SampleApp_Group
   \   00008B   7401         MOV     A,#0x1
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   E4           CLR     A
   \   000090   F0           MOVX    @DPTR,A
    270            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000091                ; Setup parameters for call to function osal_memcpy
   \   000091   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000094   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000097   F5..         MOV     ?V0 + 2,A
   \   000099   78..         MOV     R0,#?V0 + 0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009E   7C07         MOV     R4,#0x7
   \   0000A0   7D00         MOV     R5,#0x0
   \   0000A2   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A4   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A6   12....       LCALL   ??osal_memcpy?relay
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
    271            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000AE                ; Setup parameters for call to function aps_AddGroup
   \   0000AE   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B0   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B2   7914         MOV     R1,#0x14
   \   0000B4   12....       LCALL   ??aps_AddGroup?relay
    272          
    273          #if defined ( LCD_SUPPORTED )
    274            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    275          #endif
    276          }
   \   0000B7                REQUIRE ?Subroutine1
   \   0000B7                REQUIRE P0SEL
   \   0000B7                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    277          
    278          /*********************************************************************
    279           * @fn      SampleApp_ProcessEvent
    280           *
    281           * @brief   Generic Application Task event processor.  This function
    282           *          is called to process all events for the task.  Events
    283           *          include timers, messages and any other user defined events.
    284           *
    285           * @param   task_id  - The OSAL assigned task ID.
    286           * @param   events - events to process.  This is a bit map and can
    287           *                   contain more than one event.
    288           *
    289           * @return  none
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    292          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    293            afIncomingMSGPacket_t *MSGpkt;
    294            (void)task_id;  // Intentionally unreferenced parameter
    295          
    296            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    297            {
    298              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   02....       LJMP    ??SampleApp_ProcessEvent_1 & 0xFFFF
    299              while ( MSGpkt )
    300              {
    301                switch ( MSGpkt->hdr.event )
   \                     ??SampleApp_ProcessEvent_2:
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 4,A
    302                {
    303                  case KEY_CHANGE:
    304                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    305          		  break;
    306          
    307                  // Received when a messages is received (OTA) for this endpoint
    308                  case AF_INCOMING_MSG_CMD:   //½ÓÊÕµ½¿Õ¿Ú·¢¹ýÀ´µÄÏûÏ¢
    309                    SampleApp_MessageMSGCB( MSGpkt );
    310                    break;
    311          
    312                  // Received whenever the device changes state in the network
    313                  case ZDO_STATE_CHANGE:
    314                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    315                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    316                        || (SampleApp_NwkState == DEV_ROUTER)
    317                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    318                    {
    319                      // Start sending the periodic message in a regular interval.
    320                      osal_start_timerEx( SampleApp_TaskID,
    321                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    322                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    323                    }
    324                    else
    325                    {
    326                      // Device is no longer in the network
    327                    }
    328                    break;
    329          		case CMD_SERIAL_MSG: // ´®¿ÚÊÕµ½ÏûÏ¢#include "MT.h"
    330          		  uint8 len = ((mtOSALSerialData_t*)MSGpkt)->msg[0];  //´®¿ÚÏûÏ¢³¤¶È
                 		  ^
Warning[Pe1072]: a declaration cannot have a label
    331          		  uint8* msg = &(((mtOSALSerialData_t*)MSGpkt)->msg[1]);//´®¿ÚÏûÏ¢ÄÚÈÝ
   \   000020   A3           INC     DPTR
   \   000021   8582..       MOV     ?V0 + 2,DPL
   \   000024   8583..       MOV     ?V0 + 3,DPH
    332          		  afAddrType_t dstAddr;
    333          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type

        switch ( MSGpkt->hdr.event )
        ^
"C:\Documents and Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",301  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "len" (declared at line 330 of "C:\Documents and
                      Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\Samples
                      \SampleApp\Source\SampleApp.c")
            variable "msg" (declared at line 331 of "C:\Documents and
                      Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\Samples
                      \SampleApp\Source\SampleApp.c")
            variable "a" (declared at line 346 of "C:\Documents and
                      Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\Samples
                      \SampleApp\Source\SampleApp.c")
            variable "b" (declared at line 346 of "C:\Documents and
                      Settings\new\×ÀÃæ\¹¤³ÌÎÄ¼þ\ÎÂÊª¶È\Projects\zstack\Samples
                      \SampleApp\Source\SampleApp.c")
   \   000027   7408         MOV     A,#0x8
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   7402         MOV     A,#0x2
   \   00002E   F0           MOVX    @DPTR,A
    334          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002F   7409         MOV     A,#0x9
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   12....       LCALL   ?Subroutine20 & 0xFFFF
    335          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    336          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    337                                 SAMPLEAPP_MY_CLUSTERID,
    338                                 len,  // ÏûÏ¢³¤¶È
    339                                 (uint8*)msg, // ÏûÏ¢ÄÚÈÝ
    340                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    341                                 AF_DISCV_ROUTE,
    342                                 AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_31:
   \   000037                ; Setup parameters for call to function AF_DataRequest
   \   000037   75..1E       MOV     ?V0 + 5,#0x1e
   \   00003A   78..         MOV     R0,#?V0 + 5
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   75....       MOV     ?V0 + 6,#SampleApp_TransID & 0xff
   \   000042   75....       MOV     ?V0 + 7,#(SampleApp_TransID >> 8) & 0xff
   \   000045   78..         MOV     R0,#?V0 + 6
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV     R0,#?V0 + 2
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..00       MOV     ?V0 + 5,#0x0
   \   000052   78..         MOV     R0,#?V0 + 4
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..03       MOV     ?V0 + 4,#0x3
   \   00005A   78..         MOV     R0,#?V0 + 4
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7409         MOV     A,#0x9
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
    343          		  unsigned char u[13];
    344          		  for(int i=0;i<9;i++)
   \   000070   7800         MOV     R0,#0x0
   \   000072   7900         MOV     R1,#0x0
    345          		  	{u[i]=msg[i];}
   \                     ??SampleApp_ProcessEvent_3:
   \   000074   E5..         MOV     A,?V0 + 2
   \   000076   28           ADD     A,R0
   \   000077   F582         MOV     DPL,A
   \   000079   E5..         MOV     A,?V0 + 3
   \   00007B   39           ADDC    A,R1
   \   00007C   F583         MOV     DPH,A
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   C0E0         PUSH    A
   \   000081   740C         MOV     A,#0xc
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000089   D0E0         POP     A
   \   00008B   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00008E   40E4         JC      ??SampleApp_ProcessEvent_3
    346          		  int a=0,b=0,c,i;
   \   000090   7C00         MOV     R4,#0x0
   \   000092   7D00         MOV     R5,#0x0
   \   000094   7A00         MOV     R2,#0x0
   \   000096   7B00         MOV     R3,#0x0
    347                   for(i=0;i<9;i+=2)
   \   000098   7800         MOV     R0,#0x0
   \   00009A   7900         MOV     R1,#0x0
    348                       a+=u[i];
   \                     ??SampleApp_ProcessEvent_4:
   \   00009C   740C         MOV     A,#0xc
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A4   F5..         MOV     ?V0 + 4,A
   \   0000A6   EC           MOV     A,R4
   \   0000A7   25..         ADD     A,?V0 + 4
   \   0000A9   FC           MOV     R4,A
   \   0000AA   ED           MOV     A,R5
   \   0000AB   3400         ADDC    A,#0x0
   \   0000AD   FD           MOV     R5,A
   \   0000AE   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000B1   40E9         JC      ??SampleApp_ProcessEvent_4
    349                   for(i=1;i<9;i+=2)
   \   0000B3   7801         MOV     R0,#0x1
   \   0000B5   7900         MOV     R1,#0x0
    350                       b+=(3*u[i]);
   \                     ??SampleApp_ProcessEvent_5:
   \   0000B7   740C         MOV     A,#0xc
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000BF   75F003       MOV     B,#0x3
   \   0000C2   A4           MUL     AB
   \   0000C3   F5..         MOV     ?V0 + 4,A
   \   0000C5   85F0..       MOV     ?V0 + 6,B
   \   0000C8   E5..         MOV     A,?V0 + 6
   \   0000CA   F5..         MOV     ?V0 + 5,A
   \   0000CC   EA           MOV     A,R2
   \   0000CD   25..         ADD     A,?V0 + 4
   \   0000CF   FA           MOV     R2,A
   \   0000D0   EB           MOV     A,R3
   \   0000D1   35..         ADDC    A,?V0 + 5
   \   0000D3   FB           MOV     R3,A
   \   0000D4   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000D7   40DE         JC      ??SampleApp_ProcessEvent_5
    351                       c=a+b;
   \   0000D9   12....       LCALL   ?Subroutine19 & 0xFFFF
    352                   u[9]=(c/1000)%10+48;
   \                     ??CrossCallReturnLabel_26:
   \   0000DC   12....       LCALL   ?S_DIV_MOD
   \   0000DF   7A0A         MOV     R2,#0xa
   \   0000E1   7B00         MOV     R3,#0x0
   \   0000E3   12....       LCALL   ?S_DIV_MOD
   \   0000E6   EA           MOV     A,R2
   \   0000E7   2430         ADD     A,#0x30
   \   0000E9   F5..         MOV     ?V0 + 4,A
   \   0000EB   7415         MOV     A,#0x15
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   E5..         MOV     A,?V0 + 4
   \   0000F2   12....       LCALL   ??Subroutine32_0 & 0xFFFF
    353          	     u[10]=(c/100)%10+48;
   \                     ??CrossCallReturnLabel_70:
   \   0000F5   12....       LCALL   ?S_DIV_MOD
   \   0000F8   7A0A         MOV     R2,#0xa
   \   0000FA   7B00         MOV     R3,#0x0
   \   0000FC   12....       LCALL   ?S_DIV_MOD
   \   0000FF   EA           MOV     A,R2
   \   000100   2430         ADD     A,#0x30
   \   000102   C0E0         PUSH    A
   \   000104   7416         MOV     A,#0x16
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   D0E0         POP     A
   \   00010B   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    354          	     u[11]=(c/10)%10+48;
   \                     ??CrossCallReturnLabel_78:
   \   00010E   12....       LCALL   ?S_DIV_MOD
   \   000111   7A0A         MOV     R2,#0xa
   \   000113   7B00         MOV     R3,#0x0
   \   000115   12....       LCALL   ?S_DIV_MOD
   \   000118   EA           MOV     A,R2
   \   000119   2430         ADD     A,#0x30
   \   00011B   C0E0         PUSH    A
   \   00011D   7417         MOV     A,#0x17
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   D0E0         POP     A
   \   000124   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    355          	     u[12]=c%10+48;
   \                     ??CrossCallReturnLabel_79:
   \   000127   12....       LCALL   ?S_DIV_MOD
   \   00012A   EA           MOV     A,R2
   \   00012B   2430         ADD     A,#0x30
   \   00012D   C0E0         PUSH    A
   \   00012F   7418         MOV     A,#0x18
   \   000131   12....       LCALL   ?XSTACK_DISP0_8
   \   000134   D0E0         POP     A
   \   000136   F0           MOVX    @DPTR,A
    356          		 if(u[9]!=msg[9]||u[10]!=msg[10]||u[11]!=msg[11]||u[12]!=msg[12])
   \   000137   85..82       MOV     DPL,?V0 + 2
   \   00013A   85..83       MOV     DPH,?V0 + 3
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   E0           MOVX    A,@DPTR
   \   000147   65..         XRL     A,?V0 + 4
   \   000149   703B         JNZ     ??SampleApp_ProcessEvent_6
   \   00014B   7416         MOV     A,#0x16
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F8           MOV     R0,A
   \   000152   85..82       MOV     DPL,?V0 + 2
   \   000155   85..83       MOV     DPH,?V0 + 3
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   E0           MOVX    A,@DPTR
   \   000163   68           XRL     A,R0
   \   000164   7020         JNZ     ??SampleApp_ProcessEvent_6
   \   000166   7417         MOV     A,#0x17
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   F8           MOV     R0,A
   \   00016D   E5..         MOV     A,?V0 + 2
   \   00016F   240B         ADD     A,#0xb
   \   000171   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000174   7010         JNZ     ??SampleApp_ProcessEvent_6
   \   000176   7418         MOV     A,#0x18
   \   000178   12....       LCALL   ?XSTACK_DISP0_8
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F8           MOV     R0,A
   \   00017D   E5..         MOV     A,?V0 + 2
   \   00017F   240C         ADD     A,#0xc
   \   000181   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000184   6042         JZ      ??SampleApp_ProcessEvent_7
    357          		 	{
    358                       AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    359                                 SAMPLEAPP_MY_CLUSTERID,
    360                                 14,  // ÏûÏ¢³¤¶È
    361                                 "Message error\n", // ÏûÏ¢ÄÚÈÝ
    362                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    363                                 AF_DISCV_ROUTE,
    364                                 AF_DEFAULT_RADIUS );
   \                     ??SampleApp_ProcessEvent_6:
   \   000186                ; Setup parameters for call to function AF_DataRequest
   \   000186   75..1E       MOV     ?V0 + 2,#0x1e
   \   000189   78..         MOV     R0,#?V0 + 2
   \   00018B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00018E   75....       MOV     ?V0 + 2,#SampleApp_TransID & 0xff
   \   000191   75....       MOV     ?V0 + 3,#(SampleApp_TransID >> 8) & 0xff
   \   000194   78..         MOV     R0,#?V0 + 2
   \   000196   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000199   75....       MOV     ?V0 + 2,#`?<Constant "Message error\\n">` & 0xff
   \   00019C   75....       MOV     ?V0 + 3,#(`?<Constant "Message error\\n">` >> 8) & 0xff
   \   00019F   78..         MOV     R0,#?V0 + 2
   \   0001A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A4   75..0E       MOV     ?V0 + 2,#0xe
   \   0001A7   75..00       MOV     ?V0 + 3,#0x0
   \   0001AA   78..         MOV     R0,#?V0 + 2
   \   0001AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AF   75..03       MOV     ?V0 + 2,#0x3
   \   0001B2   78..         MOV     R0,#?V0 + 2
   \   0001B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B7   7920         MOV     R1,#0x20
   \   0001B9   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0001BB   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001BD   7409         MOV     A,#0x9
   \   0001BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C2   12....       LCALL   ?Subroutine12 & 0xFFFF
    365          		    }
   \                     ??CrossCallReturnLabel_51:
   \   0001C5   12....       LCALL   ?DEALLOC_XSTACK8
    366          		 
    367          		  break;
    368                  default:
    369                    break;
    370                }
    371          
    372                // Release the memory
    373                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_7:
   \   0001C8                ; Setup parameters for call to function osal_msg_deallocate
   \   0001C8   AA..         MOV     R2,?V0 + 0
   \   0001CA   AB..         MOV     R3,?V0 + 1
   \   0001CC   12....       LCALL   ??osal_msg_deallocate?relay
    374          
    375                // Next - if one is available
    376                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   0001CF                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   0001CF   90....       MOV     DPTR,#SampleApp_TaskID
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   F9           MOV     R1,A
   \   0001D4   12....       LCALL   ??osal_msg_receive?relay
   \   0001D7   8A..         MOV     ?V0 + 0,R2
   \   0001D9   8B..         MOV     ?V0 + 1,R3
   \   0001DB   E5..         MOV     A,?V0 + 0
   \   0001DD   45..         ORL     A,?V0 + 1
   \   0001DF   6055         JZ      ??SampleApp_ProcessEvent_8
   \   0001E1   85..82       MOV     DPL,?V0 + 0
   \   0001E4   85..83       MOV     DPH,?V0 + 1
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   14           DEC     A
   \   0001E9   7003         JNZ     $+5
   \   0001EB   02....       LJMP    ??SampleApp_ProcessEvent_2 & 0xFFFF
   \   0001EE   24E7         ADD     A,#-0x19
   \   0001F0   601E         JZ      ??SampleApp_ProcessEvent_9
   \   0001F2   245A         ADD     A,#0x5a
   \   0001F4   6006         JZ      ??SampleApp_ProcessEvent_10
   \   0001F6   24EF         ADD     A,#-0x11
   \   0001F8   601F         JZ      ??SampleApp_ProcessEvent_11
   \   0001FA   80CC         SJMP    ??SampleApp_ProcessEvent_7
   \                     ??SampleApp_ProcessEvent_10:
   \   0001FC                ; Setup parameters for call to function SampleApp_HandleKeys
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   FA           MOV     R2,A
   \   000201   85..82       MOV     DPL,?V0 + 0
   \   000204   85..83       MOV     DPH,?V0 + 1
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   F9           MOV     R1,A
   \   00020B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00020E   80B8         SJMP    ??SampleApp_ProcessEvent_7
   \                     ??SampleApp_ProcessEvent_9:
   \   000210                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000210   AA..         MOV     R2,?V0 + 0
   \   000212   AB..         MOV     R3,?V0 + 1
   \   000214   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000217   80AF         SJMP    ??SampleApp_ProcessEvent_7
   \                     ??SampleApp_ProcessEvent_11:
   \   000219   A3           INC     DPTR
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00021E   F0           MOVX    @DPTR,A
   \   00021F   6409         XRL     A,#0x9
   \   000221   600A         JZ      ??SampleApp_ProcessEvent_12
   \   000223   E0           MOVX    A,@DPTR
   \   000224   6407         XRL     A,#0x7
   \   000226   6005         JZ      ??SampleApp_ProcessEvent_12
   \   000228   E0           MOVX    A,@DPTR
   \   000229   6406         XRL     A,#0x6
   \   00022B   709B         JNZ     ??SampleApp_ProcessEvent_7
   \                     ??SampleApp_ProcessEvent_12:
   \   00022D                ; Setup parameters for call to function osal_start_timerEx
   \   00022D   7C88         MOV     R4,#-0x78
   \   00022F   7D13         MOV     R5,#0x13
   \   000231   12....       LCALL   ?Subroutine13 & 0xFFFF
    377              }
   \                     ??CrossCallReturnLabel_45:
   \   000234   8092         SJMP    ??SampleApp_ProcessEvent_7
    378          
    379              // return unprocessed events
    380              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_8:
   \   000236   EE           MOV     A,R6
   \   000237   FA           MOV     R2,A
   \   000238   EF           MOV     A,R7
   \   000239   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_13:
   \   00023B   FB           MOV     R3,A
   \   00023C   02....       LJMP    ??SampleApp_ProcessEvent_14 & 0xFFFF
    381            }
    382          
    383            // Send a message out - This event is generated by a timer
    384            //  (setup in SampleApp_Init()).
    385            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00023F   EE           MOV     A,R6
   \   000240   A2E0         MOV     C,0xE0 /* A   */.0
   \   000242   5018         JNC     ??SampleApp_ProcessEvent_15
    386            {
    387              // Send the periodic message
    388              SampleApp_SendPeriodicMessage();
   \   000244                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000244   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    389          
    390              // Setup to send message again in normal period (+ a little jitter)
    391              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    392                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000247                ; Setup parameters for call to function osal_rand
   \   000247   12....       LCALL   ??osal_rand?relay
   \   00024A                ; Setup parameters for call to function osal_start_timerEx
   \   00024A   EA           MOV     A,R2
   \   00024B   2488         ADD     A,#-0x78
   \   00024D   FC           MOV     R4,A
   \   00024E   E4           CLR     A
   \   00024F   3413         ADDC    A,#0x13
   \   000251   FD           MOV     R5,A
   \   000252   12....       LCALL   ?Subroutine13 & 0xFFFF
    393          
    394              // return unprocessed events
    395              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_46:
   \   000255   EE           MOV     A,R6
   \   000256   6401         XRL     A,#0x1
   \                     ??SampleApp_ProcessEvent_16:
   \   000258   FA           MOV     R2,A
   \   000259   EF           MOV     A,R7
   \   00025A   80DF         SJMP    ??SampleApp_ProcessEvent_13
    396            }
    397          
    398              if (events & MY_SEND_UART)  // ´®¿Ú·¢ËÍÏûÏ¢µÄÊÂ¼þ
   \                     ??SampleApp_ProcessEvent_15:
   \   00025C   5402         ANL     A,#0x2
   \   00025E   7003         JNZ     $+5
   \   000260   02....       LJMP    ??SampleApp_ProcessEvent_17 & 0xFFFF
    399            	{
    400          	DHT11();   //ÎÂ¶È¼ì²â	 
   \   000263                ; Setup parameters for call to function DHT11
   \   000263   12....       LCALL   ??DHT11?relay
    401          	T[0]='*';
   \   000266   12....       LCALL   ?Subroutine8 & 0xFFFF
    402          	T[1]='1';
    403          	T[2]='3';
    404          	T[3]='3';
   \                     ??CrossCallReturnLabel_11:
   \   000269   F0           MOVX    @DPTR,A
    405          	T[4]=wendu_shi+48;
   \   00026A   90....       MOV     DPTR,#wendu_shi
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   2430         ADD     A,#0x30
   \   000270   90....       MOV     DPTR,#T + 4
   \   000273   F0           MOVX    @DPTR,A
    406          	T[5]=wendu_ge+48;
   \   000274   90....       MOV     DPTR,#wendu_ge
   \   000277   E0           MOVX    A,@DPTR
   \   000278   2430         ADD     A,#0x30
   \   00027A   90....       MOV     DPTR,#T + 5
   \   00027D   F0           MOVX    @DPTR,A
    407          	uint8 j;
    408          	j=(wendu_shi)*10+(wendu_ge);
    409          	if(j>28) 
   \   00027E   75F00A       MOV     B,#0xa
   \   000281   90....       MOV     DPTR,#wendu_shi
   \   000284   E0           MOVX    A,@DPTR
   \   000285   A4           MUL     AB
   \   000286   7583..       MOV     DPH,#(wendu_ge >> 8) & 0xff
   \   000289   7582..       MOV     DPL,#wendu_ge & 0xff
   \   00028C   F8           MOV     R0,A
   \   00028D   E0           MOVX    A,@DPTR
   \   00028E   28           ADD     A,R0
   \   00028F   C3           CLR     C
   \   000290   941D         SUBB    A,#0x1d
   \   000292   90....       MOV     DPTR,#fire
   \   000295   4004         JC      ??SampleApp_ProcessEvent_18
    410          		fire=1;
   \   000297   7401         MOV     A,#0x1
   \   000299   8001         SJMP    ??SampleApp_ProcessEvent_19
    411          	else 
    412          		fire=0;
   \                     ??SampleApp_ProcessEvent_18:
   \   00029B   E4           CLR     A
   \                     ??SampleApp_ProcessEvent_19:
   \   00029C   F0           MOVX    @DPTR,A
    413          	T[6]=fire+48;
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   2430         ADD     A,#0x30
   \   0002A0   90....       MOV     DPTR,#T + 6
   \   0002A3   F0           MOVX    @DPTR,A
    414          	T[7]=shidu_shi+48;
   \   0002A4   90....       MOV     DPTR,#shidu_shi
   \   0002A7   E0           MOVX    A,@DPTR
   \   0002A8   2430         ADD     A,#0x30
   \   0002AA   90....       MOV     DPTR,#T + 7
   \   0002AD   F0           MOVX    @DPTR,A
    415          	T[8]=shidu_ge+48;
   \   0002AE   90....       MOV     DPTR,#shidu_ge
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   2430         ADD     A,#0x30
   \   0002B4   90....       MOV     DPTR,#T + 8
   \   0002B7   12....       LCALL   ?Subroutine6 & 0xFFFF
    416          	int a=0,b=0,c,i;
    417              for(i=0;i<9;i+=2)
    418                  a+=T[i];
   \                     ??CrossCallReturnLabel_6:
   \   0002BA   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0002BD   40FB         JC      ??CrossCallReturnLabel_6
    419              for(i=1;i<9;i+=2)
   \   0002BF   7801         MOV     R0,#0x1
   \   0002C1   7900         MOV     R1,#0x0
    420                  b+=(3*T[i]);
   \                     ??SampleApp_ProcessEvent_20:
   \   0002C3   74..         MOV     A,#T & 0xff
   \   0002C5   28           ADD     A,R0
   \   0002C6   F582         MOV     DPL,A
   \   0002C8   74..         MOV     A,#(T >> 8) & 0xff
   \   0002CA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0002CD   40F4         JC      ??SampleApp_ProcessEvent_20
    421              c=a+b;
   \   0002CF   12....       LCALL   ?Subroutine19 & 0xFFFF
    422              T[9]=(c/1000)%10+48;
   \                     ??CrossCallReturnLabel_27:
   \   0002D2   12....       LCALL   ?S_DIV_MOD
   \   0002D5   7A0A         MOV     R2,#0xa
   \   0002D7   7B00         MOV     R3,#0x0
   \   0002D9   12....       LCALL   ?S_DIV_MOD
   \   0002DC   12....       LCALL   ?Subroutine5 & 0xFFFF
    423          	T[10]=(c/100)%10+48;
   \                     ??CrossCallReturnLabel_67:
   \   0002DF   12....       LCALL   ?S_DIV_MOD
   \   0002E2   7A0A         MOV     R2,#0xa
   \   0002E4   7B00         MOV     R3,#0x0
   \   0002E6   12....       LCALL   ?S_DIV_MOD
   \   0002E9   12....       LCALL   ?Subroutine2 & 0xFFFF
    424          	T[11]=(c/10)%10+48;
   \                     ??CrossCallReturnLabel_72:
   \   0002EC   12....       LCALL   ?S_DIV_MOD
   \   0002EF   7A0A         MOV     R2,#0xa
   \   0002F1   7B00         MOV     R3,#0x0
   \   0002F3   12....       LCALL   ?S_DIV_MOD
   \   0002F6   12....       LCALL   ?Subroutine2 & 0xFFFF
    425          	T[12]=c%10+48;
   \                     ??CrossCallReturnLabel_73:
   \   0002F9   12....       LCALL   ?S_DIV_MOD
   \   0002FC   12....       LCALL   ?Subroutine4 & 0xFFFF
    426          	//HalUARTWrite(0,jiaoyan,sizeof(jiaoyan));
    427          	HalUARTWrite(0,"\n",1);
    428          	HalUARTWrite(0,T,13);
    429          	afAddrType_t dstAddr;
    430          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??CrossCallReturnLabel_4:
   \   0002FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000302   7402         MOV     A,#0x2
   \   000304   F0           MOVX    @DPTR,A
    431          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000305   7409         MOV     A,#0x9
   \   000307   12....       LCALL   ?XSTACK_DISP0_8
   \   00030A   12....       LCALL   ?Subroutine3 & 0xFFFF
    432          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    433          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    434                                 SAMPLEAPP_MY_CLUSTERID,
    435                                 13,  // ÏûÏ¢³¤¶È
    436                                 T, // ÏûÏ¢ÄÚÈÝ
    437                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    438                                 AF_DISCV_ROUTE,
    439                                 AF_DEFAULT_RADIUS );	
   \                     ??CrossCallReturnLabel_1:
   \   00030D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000310   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000313   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000316   78..         MOV     R0,#?V0 + 0
   \   000318   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00031B   75....       MOV     ?V0 + 0,#T & 0xff
   \   00031E   75....       MOV     ?V0 + 1,#(T >> 8) & 0xff
   \   000321   78..         MOV     R0,#?V0 + 0
   \   000323   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000326   75..0D       MOV     ?V0 + 0,#0xd
   \   000329   75..00       MOV     ?V0 + 1,#0x0
   \   00032C   78..         MOV     R0,#?V0 + 0
   \   00032E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000331   75..03       MOV     ?V0 + 0,#0x3
   \   000334   78..         MOV     R0,#?V0 + 0
   \   000336   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000339   7920         MOV     R1,#0x20
   \   00033B   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00033D   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00033F   7409         MOV     A,#0x9
   \   000341   12....       LCALL   ?XSTACK_DISP0_8
   \   000344   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000347   12....       LCALL   ?DEALLOC_XSTACK8
    440                 // HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
    441          	if(fire)
   \   00034A   90....       MOV     DPTR,#fire
   \   00034D   E0           MOVX    A,@DPTR
   \   00034E   6007         JZ      ??SampleApp_ProcessEvent_21
    442          		{ HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);}
   \   000350                ; Setup parameters for call to function HalLedSet
   \   000350   7A01         MOV     R2,#0x1
   \   000352   7901         MOV     R1,#0x1
   \   000354   12....       LCALL   ??HalLedSet?relay
    443          
    444          		//SendKongkouInfor(T);
    445          		
    446          		//else  HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
    447          	r=!r;
   \                     ??SampleApp_ProcessEvent_21:
   \   000357   90....       MOV     DPTR,#r
   \   00035A   E0           MOVX    A,@DPTR
   \   00035B   7004         JNZ     ??SampleApp_ProcessEvent_22
   \   00035D   7401         MOV     A,#0x1
   \   00035F   8001         SJMP    ??SampleApp_ProcessEvent_23
   \                     ??SampleApp_ProcessEvent_22:
   \   000361   E4           CLR     A
   \                     ??SampleApp_ProcessEvent_23:
   \   000362   F0           MOVX    @DPTR,A
    448          	if(r){
   \   000363   A2E0         MOV     C,0xE0 /* A   */.0
   \   000365   5004         JNC     ??SampleApp_ProcessEvent_24
    449          		HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);}
   \   000367                ; Setup parameters for call to function HalLedSet
   \   000367   7A01         MOV     R2,#0x1
   \   000369   8002         SJMP    ??SampleApp_ProcessEvent_25
    450          		else HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
   \                     ??SampleApp_ProcessEvent_24:
   \   00036B                ; Setup parameters for call to function HalLedSet
   \   00036B   7A00         MOV     R2,#0x0
   \                     ??SampleApp_ProcessEvent_25:
   \   00036D   7902         MOV     R1,#0x2
   \   00036F   12....       LCALL   ??HalLedSet?relay
    451          		osal_start_timerEx (SampleApp_TaskID, MY_SEND_UART, 2000); //3s¶¨Ê±Æ÷
   \   000372                ; Setup parameters for call to function osal_start_timerEx
   \   000372   7CD0         MOV     R4,#-0x30
   \   000374   7D07         MOV     R5,#0x7
   \   000376   7A02         MOV     R2,#0x2
   \   000378   12....       LCALL   ??Subroutine27_0 & 0xFFFF
    452                    
    453          		  return (events ^ MY_SEND_UART);
   \                     ??CrossCallReturnLabel_47:
   \   00037B   EE           MOV     A,R6
   \   00037C   6402         XRL     A,#0x2
   \   00037E   02....       LJMP    ??SampleApp_ProcessEvent_16 & 0xFFFF
    454            	}
    455          	if (events & MY_SEND2_UART)  
   \                     ??SampleApp_ProcessEvent_17:
   \   000381   EE           MOV     A,R6
   \   000382   5404         ANL     A,#0x4
   \   000384   6032         JZ      ??CrossCallReturnLabel_48
    456            	{
    457              if(!fire){
   \   000386   90....       MOV     DPTR,#fire
   \   000389   E0           MOVX    A,@DPTR
   \   00038A   7023         JNZ     ??SampleApp_ProcessEvent_26
    458          	 //if(c[1]==4)
    459          	 	//{c[2]=T[8];//JieQu(T,8,1);
    460          	 	//HalUARTWrite(0,"a",1);
    461          	 	if(m=='0')
   \   00038C   90....       MOV     DPTR,#m
   \   00038F   E0           MOVX    A,@DPTR
   \   000390   6430         XRL     A,#0x30
   \   000392   7014         JNZ     ??SampleApp_ProcessEvent_27
    462               	{h=!h;
   \   000394   90....       MOV     DPTR,#h
   \   000397   E0           MOVX    A,@DPTR
   \   000398   7004         JNZ     ??SampleApp_ProcessEvent_28
   \   00039A   7401         MOV     A,#0x1
   \   00039C   8001         SJMP    ??SampleApp_ProcessEvent_29
   \                     ??SampleApp_ProcessEvent_28:
   \   00039E   E4           CLR     A
   \                     ??SampleApp_ProcessEvent_29:
   \   00039F   F0           MOVX    @DPTR,A
    463          		if(h)HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
   \   0003A0   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003A2   5004         JNC     ??SampleApp_ProcessEvent_27
   \   0003A4                ; Setup parameters for call to function HalLedSet
   \   0003A4   7A01         MOV     R2,#0x1
   \   0003A6   8002         SJMP    ??SampleApp_ProcessEvent_30
    464          		else HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
   \                     ??SampleApp_ProcessEvent_27:
   \   0003A8                ; Setup parameters for call to function HalLedSet
   \   0003A8   7A00         MOV     R2,#0x0
   \                     ??SampleApp_ProcessEvent_30:
   \   0003AA   7901         MOV     R1,#0x1
   \   0003AC   12....       LCALL   ??HalLedSet?relay
    465          	 	}
    466          	 	//}
    467          		else HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
    468              	}
    469          	 osal_start_timerEx (SampleApp_TaskID, MY_SEND2_UART, 800);
   \                     ??SampleApp_ProcessEvent_26:
   \   0003AF                ; Setup parameters for call to function osal_start_timerEx
   \   0003AF   7C20         MOV     R4,#0x20
   \   0003B1   7D03         MOV     R5,#0x3
   \   0003B3   7A04         MOV     R2,#0x4
   \   0003B5   12....       LCALL   ??Subroutine27_0 & 0xFFFF
    470          	}
    471          
    472            // Discard unknown events
    473            return 0;
   \                     ??CrossCallReturnLabel_48:
   \   0003B8   7A00         MOV     R2,#0x0
   \   0003BA   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_14:
   \   0003BC   7419         MOV     A,#0x19
   \   0003BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003C1   7F08         MOV     R7,#0x8
   \   0003C3   02....       LJMP    ?BANKED_LEAVE_XDATA
    474          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 3
   \   000004                REQUIRE ??Subroutine26_0
   \   000004                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   68           XRL     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7A01         MOV     R2,#0x1
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   74..         MOV     A,#T & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(T >> 8) & 0xff
   \   000007                REQUIRE ??Subroutine29_0
   \   000007                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   EC           MOV     A,R4
   \   000007   25..         ADD     A,?V0 + 0
   \   000009   FC           MOV     R4,A
   \   00000A   ED           MOV     A,R5
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   FD           MOV     R5,A
   \   00000E   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EC           MOV     A,R4
   \   000001   2A           ADD     A,R2
   \   000002   FC           MOV     R4,A
   \   000003   ED           MOV     A,R5
   \   000004   3B           ADDC    A,R3
   \   000005   FD           MOV     R5,A
   \   000006   EC           MOV     A,R4
   \   000007   F8           MOV     R0,A
   \   000008   ED           MOV     A,R5
   \   000009   F9           MOV     R1,A
   \   00000A   7AE8         MOV     R2,#-0x18
   \   00000C   7B03         MOV     R3,#0x3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#T
   \   000003   742A         MOV     A,#0x2a
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   7431         MOV     A,#0x31
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7433         MOV     A,#0x33
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   7C00         MOV     R4,#0x0
   \   000003   7D00         MOV     R5,#0x0
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   7800         MOV     R0,#0x0
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000005   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000007   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EA           MOV     A,R2
   \   000001   2430         ADD     A,#0x30
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C0D         MOV     R4,#0xd
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#T & 0xff
   \   00000B   7B..         MOV     R3,#(T >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   7408         MOV     A,#0x8
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005                ; Setup parameters for call to function HalLedBlink
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   85F0..       MOV     ?V0 + 2,B
   \   000006   E5..         MOV     A,?V0 + 2
   \   000008   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   75F003       MOV     B,#0x3
   \   000007   A4           MUL     AB
   \   000008   F5..         MOV     ?V0 + 0,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F5..         MOV     ?V0 + 1,A
   \   000002   EA           MOV     A,R2
   \   000003   25..         ADD     A,?V0 + 0
   \   000005   FA           MOV     R2,A
   \   000006   EB           MOV     A,R3
   \   000007   35..         ADDC    A,?V0 + 1
   \   000009   FB           MOV     R3,A
   \   00000A                REQUIRE ??Subroutine30_0
   \   00000A                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   E8           MOV     A,R0
   \   000001   2402         ADD     A,#0x2
   \   000003   08           INC     R0
   \   000004                REQUIRE ??Subroutine31_0
   \   000004                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   08           INC     R0
   \   000001   E9           MOV     A,R1
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   C3           CLR     C
   \   000006   E8           MOV     A,R0
   \   000007   9409         SUBB    A,#0x9
   \   000009   E9           MOV     A,R1
   \   00000A   9400         SUBB    A,#0x0
   \   00000C   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00000E   65D0         XRL     A,PSW
   \   000010   33           RLC     A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   2401         ADD     A,#0x1
   \   000004   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EA           MOV     A,R2
   \   000001   2430         ADD     A,#0x30
   \   000003   90....       MOV     DPTR,#T + 9
   \   000006                REQUIRE ??Subroutine32_0
   \   000006                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   F8           MOV     R0,A
   \   000003   ED           MOV     A,R5
   \   000004   F9           MOV     R1,A
   \   000005   7A64         MOV     R2,#0x64
   \   000007   7B00         MOV     R3,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   2430         ADD     A,#0x30
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine33_0
   \   000004                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   F8           MOV     R0,A
   \   000003   ED           MOV     A,R5
   \   000004   F9           MOV     R1,A
   \   000005   7A0A         MOV     R2,#0xa
   \   000007   7B00         MOV     R3,#0x0
   \   000009   22           RET
    475          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    476          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    477          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    478            (void)shift;  // Intentionally unreferenced parameter
    479            
    480            if ( keys & HAL_KEY_SW_7 )
   \   00000C   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000E   4003         JC      $+5
   \   000010   02....       LJMP    ??SampleApp_HandleKeys_0 & 0xFFFF
    481            {
    482            T[0]='*';
   \   000013   12....       LCALL   ?Subroutine8 & 0xFFFF
    483            T[1]='1';
    484            T[2]='3';
    485            T[3]='2';
   \                     ??CrossCallReturnLabel_12:
   \   000016   14           DEC     A
   \   000017   F0           MOVX    @DPTR,A
    486            T[4]='A';
   \   000018   A3           INC     DPTR
   \   000019   7441         MOV     A,#0x41
   \   00001B   F0           MOVX    @DPTR,A
    487            T[5]='8';
   \   00001C   A3           INC     DPTR
   \   00001D   7438         MOV     A,#0x38
   \   00001F   F0           MOVX    @DPTR,A
    488            T[6]='8';
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
    489            T[7]='8';
   \   000022   A3           INC     DPTR
   \   000023   F0           MOVX    @DPTR,A
    490            T[8]='8';
   \   000024   A3           INC     DPTR
   \   000025   12....       LCALL   ?Subroutine6 & 0xFFFF
    491            int a=0,b=0,c,i;
    492              for(i=0;i<9;i+=2)
    493                  a+=T[i];
   \                     ??CrossCallReturnLabel_7:
   \   000028   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00002B   40FB         JC      ??CrossCallReturnLabel_7
    494              for(i=1;i<9;i+=2)
   \   00002D   7801         MOV     R0,#0x1
   \   00002F   7900         MOV     R1,#0x0
    495                  b+=(3*T[i]);
   \                     ??SampleApp_HandleKeys_1:
   \   000031   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000034   40FB         JC      ??SampleApp_HandleKeys_1
    496              c=a+b;
   \   000036   12....       LCALL   ?Subroutine19 & 0xFFFF
    497              T[9]=(c/1000)%10+48;
   \                     ??CrossCallReturnLabel_28:
   \   000039   12....       LCALL   ?S_DIV_MOD
   \   00003C   7A0A         MOV     R2,#0xa
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ?S_DIV_MOD
   \   000043   12....       LCALL   ?Subroutine5 & 0xFFFF
    498          	T[10]=(c/100)%10+48;
   \                     ??CrossCallReturnLabel_68:
   \   000046   12....       LCALL   ?S_DIV_MOD
   \   000049   7A0A         MOV     R2,#0xa
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   12....       LCALL   ?S_DIV_MOD
   \   000050   12....       LCALL   ?Subroutine2 & 0xFFFF
    499          	T[11]=(c/10)%10+48;
   \                     ??CrossCallReturnLabel_74:
   \   000053   12....       LCALL   ?S_DIV_MOD
   \   000056   7A0A         MOV     R2,#0xa
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   12....       LCALL   ?S_DIV_MOD
   \   00005D   12....       LCALL   ?Subroutine2 & 0xFFFF
    500          	T[12]=c%10+48;
   \                     ??CrossCallReturnLabel_75:
   \   000060   12....       LCALL   ?S_DIV_MOD
   \   000063   12....       LCALL   ?Subroutine4 & 0xFFFF
    501          	HalUARTWrite(0,"\n",1);
    502          	HalUARTWrite(0,T,13);
    503          	afAddrType_t dstAddr;
    504          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??CrossCallReturnLabel_5:
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   7402         MOV     A,#0x2
   \   00006B   F0           MOVX    @DPTR,A
    505          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ?Subroutine3 & 0xFFFF
    506          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    507          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    508                                 SAMPLEAPP_MY_CLUSTERID,
    509                                 13,  // ÏûÏ¢³¤¶È
    510                                 T, // ÏûÏ¢ÄÚÈÝ
    511                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    512                                 AF_DISCV_ROUTE,
    513                                 AF_DEFAULT_RADIUS );	
    514            }
   \                     ??CrossCallReturnLabel_2:
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00007A   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   75....       MOV     ?V0 + 0,#T & 0xff
   \   000085   75....       MOV     ?V0 + 1,#(T >> 8) & 0xff
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   75..0D       MOV     ?V0 + 0,#0xd
   \   000090   75..00       MOV     ?V0 + 1,#0x0
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   75..03       MOV     ?V0 + 0,#0x3
   \   00009B   78..         MOV     R0,#?V0 + 0
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   7920         MOV     R1,#0x20
   \   0000A2   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000A4   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000A6   7409         MOV     A,#0x9
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    515          
    516            if ( keys & HAL_KEY_SW_6 )
   \                     ??SampleApp_HandleKeys_0:
   \   0000B1   EE           MOV     A,R6
   \   0000B2   A2E5         MOV     C,0xE0 /* A   */.5
   \   0000B4   4003         JC      $+5
   \   0000B6   02....       LJMP    ??SampleApp_HandleKeys_2 & 0xFFFF
    517            {
    518            T[0]='*';
   \   0000B9   12....       LCALL   ?Subroutine8 & 0xFFFF
    519            T[1]='1';
    520            T[2]='3';
    521            T[3]='4';
   \                     ??CrossCallReturnLabel_13:
   \   0000BC   04           INC     A
   \   0000BD   F0           MOVX    @DPTR,A
    522            T[4]='0';
   \   0000BE   A3           INC     DPTR
   \   0000BF   7430         MOV     A,#0x30
   \   0000C1   F0           MOVX    @DPTR,A
    523            T[5]='0';
   \   0000C2   A3           INC     DPTR
   \   0000C3   F0           MOVX    @DPTR,A
    524            T[6]='0';
   \   0000C4   A3           INC     DPTR
   \   0000C5   F0           MOVX    @DPTR,A
    525            T[7]='2';
   \   0000C6   A3           INC     DPTR
   \   0000C7   7432         MOV     A,#0x32
   \   0000C9   F0           MOVX    @DPTR,A
    526            T[8]='1';
   \   0000CA   A3           INC     DPTR
   \   0000CB   14           DEC     A
   \   0000CC   12....       LCALL   ?Subroutine6 & 0xFFFF
    527            int a=0,b=0,c,i;
    528              for(i=0;i<9;i+=2)
    529                  a+=T[i];
   \                     ??CrossCallReturnLabel_8:
   \   0000CF   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000D2   40FB         JC      ??CrossCallReturnLabel_8
    530              for(i=1;i<9;i+=2)
   \   0000D4   7801         MOV     R0,#0x1
   \   0000D6   7900         MOV     R1,#0x0
    531                  b+=(3*T[i]);
   \                     ??SampleApp_HandleKeys_3:
   \   0000D8   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000DB   40FB         JC      ??SampleApp_HandleKeys_3
    532              c=a+b;
   \   0000DD   12....       LCALL   ?Subroutine19 & 0xFFFF
    533              T[9]=(c/1000)%10+48;
   \                     ??CrossCallReturnLabel_29:
   \   0000E0   12....       LCALL   ?S_DIV_MOD
   \   0000E3   7A0A         MOV     R2,#0xa
   \   0000E5   7B00         MOV     R3,#0x0
   \   0000E7   12....       LCALL   ?S_DIV_MOD
   \   0000EA   12....       LCALL   ?Subroutine5 & 0xFFFF
    534          	T[10]=(c/100)%10+48;
   \                     ??CrossCallReturnLabel_69:
   \   0000ED   12....       LCALL   ?S_DIV_MOD
   \   0000F0   7A0A         MOV     R2,#0xa
   \   0000F2   7B00         MOV     R3,#0x0
   \   0000F4   12....       LCALL   ?S_DIV_MOD
   \   0000F7   12....       LCALL   ?Subroutine2 & 0xFFFF
    535          	T[11]=(c/10)%10+48;
   \                     ??CrossCallReturnLabel_76:
   \   0000FA   12....       LCALL   ?S_DIV_MOD
   \   0000FD   7A0A         MOV     R2,#0xa
   \   0000FF   7B00         MOV     R3,#0x0
   \   000101   12....       LCALL   ?S_DIV_MOD
   \   000104   12....       LCALL   ?Subroutine2 & 0xFFFF
    536          	T[12]=c%10+48;
   \                     ??CrossCallReturnLabel_77:
   \   000107   12....       LCALL   ?S_DIV_MOD
   \   00010A   12....       LCALL   ?Subroutine25 & 0xFFFF
    537          	HalUARTWrite(0,"/n",1);
   \                     ??CrossCallReturnLabel_39:
   \   00010D   7A..         MOV     R2,#`?<Constant "/n">` & 0xff
   \   00010F   7B..         MOV     R3,#(`?<Constant "/n">` >> 8) & 0xff
   \   000111   12....       LCALL   ?Subroutine24 & 0xFFFF
    538          	HalUARTWrite(0,T,13);
    539          	afAddrType_t dstAddr;
    540          		  dstAddr.addrMode = Addr16Bit;		// µØÖ·Ä£Ê½Îª16Î»¶ÎµØÖ·
                 		                   ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??CrossCallReturnLabel_37:
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   7402         MOV     A,#0x2
   \   000119   F0           MOVX    @DPTR,A
    541          		  dstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00011A   7409         MOV     A,#0x9
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   12....       LCALL   ?Subroutine3 & 0xFFFF
    542          		  dstAddr.addr.shortAddr = 0xFFFF;   // 0xFFFF±íÊ¾¹ã²¥,0x0000ÎªÐ­µ÷Æ÷
    543          		  AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    544                                 SAMPLEAPP_MY_CLUSTERID,
    545                                 13,  // ÏûÏ¢³¤¶È
    546                                 T, // ÏûÏ¢ÄÚÈÝ
    547                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    548                                 AF_DISCV_ROUTE,
    549                                 AF_DEFAULT_RADIUS );	
   \                     ??CrossCallReturnLabel_3:
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000125   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000128   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00012B   78..         MOV     R0,#?V0 + 0
   \   00012D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000130   75....       MOV     ?V0 + 0,#T & 0xff
   \   000133   75....       MOV     ?V0 + 1,#(T >> 8) & 0xff
   \   000136   78..         MOV     R0,#?V0 + 0
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013B   75..0D       MOV     ?V0 + 0,#0xd
   \   00013E   75..00       MOV     ?V0 + 1,#0x0
   \   000141   78..         MOV     R0,#?V0 + 0
   \   000143   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000146   75..03       MOV     ?V0 + 0,#0x3
   \   000149   78..         MOV     R0,#?V0 + 0
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014E   7920         MOV     R1,#0x20
   \   000150   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000152   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000154   7409         MOV     A,#0x9
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
    550          	m=3;
   \   00015F   90....       MOV     DPTR,#m
   \   000162   7403         MOV     A,#0x3
   \   000164   F0           MOVX    @DPTR,A
    551            }
    552          }
   \                     ??SampleApp_HandleKeys_2:
   \   000165   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   74..         MOV     A,#T & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(T >> 8) & 0xff
   \   000007   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00000A   E5F0         MOV     A,B
   \   00000C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00000F   22           RET
    553          
    554          /*********************************************************************
    555           * LOCAL FUNCTIONS
    556           */
    557          
    558          /*********************************************************************
    559           * @fn      SampleApp_MessageMSGCB
    560           *
    561           * @brief   Data message processor callback.  This function processes
    562           *          any incoming data - probably from other devices.  So, based
    563           *          on cluster ID, perform the intended action.
    564           *
    565           * @param   none
    566           *
    567           * @return  none
    568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    569          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    570          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    571            uint16 flashTime;
    572          
    573            switch ( pkt->clusterId )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000022   0200         DW        2
   \   000024   01           DB        1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000027   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000029   ....         DW        ??SampleApp_MessageMSGCB_2
    574            {
    575              case SAMPLEAPP_PERIODIC_CLUSTERID:
    576                break;
    577          
    578              case SAMPLEAPP_FLASH_CLUSTERID:
    579                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    580                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   00002B   EE           MOV     A,R6
   \   00002C   2422         ADD     A,#0x22
   \   00002E   F5..         MOV     ?V0 + 0,A
   \   000030   EF           MOV     A,R7
   \   000031   3400         ADDC    A,#0x0
   \   000033   85..82       MOV     DPL,?V0 + 0
   \   000036   F583         MOV     DPH,A
   \   000038   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FA           MOV     R2,A
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   EA           MOV     A,R2
   \   000047   2400         ADD     A,#0x0
   \   000049   F5..         MOV     ?V0 + 0,A
   \   00004B   E4           CLR     A
   \   00004C   39           ADDC    A,R1
   \   00004D   F5..         MOV     ?V0 + 1,A
   \   00004F   7402         MOV     A,#0x2
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?US_SHR
   \   000056   AC..         MOV     R4,?V0 + 0
   \   000058   AD..         MOV     R5,?V0 + 1
   \   00005A   7B32         MOV     R3,#0x32
   \   00005C   7A04         MOV     R2,#0x4
   \   00005E   7908         MOV     R1,#0x8
   \   000060   12....       LCALL   ??HalLedBlink?relay
    581                break;
   \   000063   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    582          	
    583              case SAMPLEAPP_MY_CLUSTERID:   // ÎÒÃÇ×Ô¶¨ÒåµÄÏûÏ¢
    584          		
    585                HalUARTWrite(0,"\n",1);
   \                     ??SampleApp_MessageMSGCB_2:
   \   000066                ; Setup parameters for call to function HalUARTWrite
   \   000066   7C01         MOV     R4,#0x1
   \   000068   7D00         MOV     R5,#0x0
   \   00006A   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00006C   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00006E   7900         MOV     R1,#0x0
   \   000070   12....       LCALL   ??HalUARTWrite?relay
    586                HalUARTWrite(0,pkt->cmd.Data,pkt->cmd.DataLength);	// ¿Õ¿ÚÏûÏ¢×ª·¢
   \   000073   EE           MOV     A,R6
   \   000074   2422         ADD     A,#0x22
   \   000076   F8           MOV     R0,A
   \   000077   EF           MOV     A,R7
   \   000078   3400         ADDC    A,#0x0
   \   00007A   F9           MOV     R1,A
   \   00007B   88..         MOV     ?V0 + 0,R0
   \   00007D   89..         MOV     ?V0 + 1,R1
   \   00007F                ; Setup parameters for call to function HalUARTWrite
   \   00007F   EE           MOV     A,R6
   \   000080   2420         ADD     A,#0x20
   \   000082   F582         MOV     DPL,A
   \   000084   EF           MOV     A,R7
   \   000085   3400         ADDC    A,#0x0
   \   000087   F583         MOV     DPH,A
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   FC           MOV     R4,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FD           MOV     R5,A
   \   00008E   8882         MOV     DPL,R0
   \   000090   8983         MOV     DPH,R1
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FA           MOV     R2,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   FB           MOV     R3,A
   \   000097   7900         MOV     R1,#0x0
   \   000099   12....       LCALL   ??HalUARTWrite?relay
    587          		uint8* q=(uint8*)pkt->cmd.Data;
   \   00009C   85..82       MOV     DPL,?V0 + 0
   \   00009F   85..83       MOV     DPH,?V0 + 1
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   FE           MOV     R6,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FF           MOV     R7,A
    588                  //uint8* ch=q;
    589          		//JieQu(ch,4,1);
    590          		//c[1]=q[3];
    591                  unsigned char u[13];
    592          		  for(int i=0;i<9;i++)
   \   0000A7   7800         MOV     R0,#0x0
   \   0000A9   7900         MOV     R1,#0x0
    593          		  	{u[i]=q[i];}
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000AB   EE           MOV     A,R6
   \   0000AC   28           ADD     A,R0
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   EF           MOV     A,R7
   \   0000B0   39           ADDC    A,R1
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   C0E0         PUSH    A
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000C4   40E5         JC      ??SampleApp_MessageMSGCB_3
    594          		  int a=0,b=0,c,i;
   \   0000C6   7C00         MOV     R4,#0x0
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   7A00         MOV     R2,#0x0
   \   0000CC   7B00         MOV     R3,#0x0
    595                   for(i=0;i<9;i+=2)
   \   0000CE   7800         MOV     R0,#0x0
   \   0000D0   7900         MOV     R1,#0x0
    596                       a+=u[i];
   \                     ??SampleApp_MessageMSGCB_4:
   \   0000D2   85..82       MOV     DPL,?XSP + 0
   \   0000D5   85..83       MOV     DPH,?XSP + 1
   \   0000D8   E582         MOV     A,DPL
   \   0000DA   28           ADD     A,R0
   \   0000DB   F582         MOV     DPL,A
   \   0000DD   E583         MOV     A,DPH
   \   0000DF   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000E2   40EE         JC      ??SampleApp_MessageMSGCB_4
    597                   for(i=1;i<9;i+=2)
   \   0000E4   7801         MOV     R0,#0x1
   \   0000E6   7900         MOV     R1,#0x0
    598                       b+=(3*u[i]);
   \                     ??SampleApp_MessageMSGCB_5:
   \   0000E8   85..82       MOV     DPL,?XSP + 0
   \   0000EB   85..83       MOV     DPH,?XSP + 1
   \   0000EE   E582         MOV     A,DPL
   \   0000F0   28           ADD     A,R0
   \   0000F1   F582         MOV     DPL,A
   \   0000F3   E583         MOV     A,DPH
   \   0000F5   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000F8   40EE         JC      ??SampleApp_MessageMSGCB_5
    599                       c=a+b;
   \   0000FA   12....       LCALL   ?Subroutine19 & 0xFFFF
    600                   u[9]=(c/1000)%10+48;
   \                     ??CrossCallReturnLabel_30:
   \   0000FD   12....       LCALL   ?S_DIV_MOD
   \   000100   7A0A         MOV     R2,#0xa
   \   000102   7B00         MOV     R3,#0x0
   \   000104   12....       LCALL   ?S_DIV_MOD
   \   000107   EA           MOV     A,R2
   \   000108   2430         ADD     A,#0x30
   \   00010A   F5..         MOV     ?V0 + 0,A
   \   00010C   7409         MOV     A,#0x9
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   E5..         MOV     A,?V0 + 0
   \   000113   12....       LCALL   ??Subroutine32_0 & 0xFFFF
    601          	     u[10]=(c/100)%10+48;
   \                     ??CrossCallReturnLabel_71:
   \   000116   12....       LCALL   ?S_DIV_MOD
   \   000119   7A0A         MOV     R2,#0xa
   \   00011B   7B00         MOV     R3,#0x0
   \   00011D   12....       LCALL   ?S_DIV_MOD
   \   000120   EA           MOV     A,R2
   \   000121   2430         ADD     A,#0x30
   \   000123   C0E0         PUSH    A
   \   000125   740A         MOV     A,#0xa
   \   000127   12....       LCALL   ?XSTACK_DISP0_8
   \   00012A   D0E0         POP     A
   \   00012C   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    602          	     u[11]=(c/10)%10+48;
   \                     ??CrossCallReturnLabel_80:
   \   00012F   12....       LCALL   ?S_DIV_MOD
   \   000132   7A0A         MOV     R2,#0xa
   \   000134   7B00         MOV     R3,#0x0
   \   000136   12....       LCALL   ?S_DIV_MOD
   \   000139   EA           MOV     A,R2
   \   00013A   2430         ADD     A,#0x30
   \   00013C   C0E0         PUSH    A
   \   00013E   740B         MOV     A,#0xb
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   D0E0         POP     A
   \   000145   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    603          	     u[12]=c%10+48;
   \                     ??CrossCallReturnLabel_81:
   \   000148   12....       LCALL   ?S_DIV_MOD
   \   00014B   EA           MOV     A,R2
   \   00014C   2430         ADD     A,#0x30
   \   00014E   C0E0         PUSH    A
   \   000150   740C         MOV     A,#0xc
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   D0E0         POP     A
   \   000157   F0           MOVX    @DPTR,A
    604          		 if(u[9]!=q[9]||u[10]!=q[10]||u[11]!=q[11]||u[12]!=q[12])
   \   000158   8E82         MOV     DPL,R6
   \   00015A   8F83         MOV     DPH,R7
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   65..         XRL     A,?V0 + 0
   \   000168   703D         JNZ     ??SampleApp_MessageMSGCB_6
   \   00016A   740A         MOV     A,#0xa
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F8           MOV     R0,A
   \   000171   8E82         MOV     DPL,R6
   \   000173   8F83         MOV     DPH,R7
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   68           XRL     A,R0
   \   000181   7024         JNZ     ??SampleApp_MessageMSGCB_6
   \   000183   740B         MOV     A,#0xb
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   E0           MOVX    A,@DPTR
   \   000189   F8           MOV     R0,A
   \   00018A   EE           MOV     A,R6
   \   00018B   240B         ADD     A,#0xb
   \   00018D   F582         MOV     DPL,A
   \   00018F   EF           MOV     A,R7
   \   000190   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000193   7012         JNZ     ??SampleApp_MessageMSGCB_6
   \   000195   740C         MOV     A,#0xc
   \   000197   12....       LCALL   ?XSTACK_DISP0_8
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   F8           MOV     R0,A
   \   00019C   EE           MOV     A,R6
   \   00019D   240C         ADD     A,#0xc
   \   00019F   F582         MOV     DPL,A
   \   0001A1   EF           MOV     A,R7
   \   0001A2   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0001A5   6042         JZ      ??SampleApp_MessageMSGCB_7
    605          		 	{
    606                                 afAddrType_t dstAddr;
    607                                 AF_DataRequest( &dstAddr, &SampleApp_epDesc,  // Í¨¹ý¿Õ¿Ú·¢ËÍÏûÏ¢
    608                                 SAMPLEAPP_MY_CLUSTERID,
    609                                 14,  // ÏûÏ¢³¤¶È
    610                                 "Message error\n", // ÏûÏ¢ÄÚÈÝ
    611                                 &SampleApp_TransID,  // ÏûÏ¢±àºÅ
    612                                 AF_DISCV_ROUTE,
    613                                 AF_DEFAULT_RADIUS );
   \                     ??SampleApp_MessageMSGCB_6:
   \   0001A7                ; Setup parameters for call to function AF_DataRequest
   \   0001A7   75..1E       MOV     ?V0 + 0,#0x1e
   \   0001AA   78..         MOV     R0,#?V0 + 0
   \   0001AC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AF   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0001B2   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0001B5   78..         MOV     R0,#?V0 + 0
   \   0001B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BA   75....       MOV     ?V0 + 0,#`?<Constant "Message error\\n">` & 0xff
   \   0001BD   75....       MOV     ?V0 + 1,#(`?<Constant "Message error\\n">` >> 8) & 0xff
   \   0001C0   78..         MOV     R0,#?V0 + 0
   \   0001C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C5   75..0E       MOV     ?V0 + 0,#0xe
   \   0001C8   75..00       MOV     ?V0 + 1,#0x0
   \   0001CB   78..         MOV     R0,#?V0 + 0
   \   0001CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D0   75..03       MOV     ?V0 + 0,#0x3
   \   0001D3   78..         MOV     R0,#?V0 + 0
   \   0001D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D8   7920         MOV     R1,#0x20
   \   0001DA   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0001DC   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001DE   7416         MOV     A,#0x16
   \   0001E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E3   12....       LCALL   ?Subroutine12 & 0xFFFF
    614          		    }
   \                     ??CrossCallReturnLabel_55:
   \   0001E6   12....       LCALL   ?DEALLOC_XSTACK8
    615          		if(q[3]=='4'){m=q[8];
   \                     ??SampleApp_MessageMSGCB_7:
   \   0001E9   8E82         MOV     DPL,R6
   \   0001EB   8F83         MOV     DPH,R7
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   6434         XRL     A,#0x34
   \   0001F3   701E         JNZ     ??SampleApp_MessageMSGCB_8
   \   0001F5   8E82         MOV     DPL,R6
   \   0001F7   8F83         MOV     DPH,R7
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   E0           MOVX    A,@DPTR
   \   000202   90....       MOV     DPTR,#m
   \   000205   F0           MOVX    @DPTR,A
    616          			HalUARTWrite(0,"a",1);}
   \   000206                ; Setup parameters for call to function HalUARTWrite
   \   000206   7C01         MOV     R4,#0x1
   \   000208   7D00         MOV     R5,#0x0
   \   00020A   7A..         MOV     R2,#`?<Constant "a">` & 0xff
   \   00020C   7B..         MOV     R3,#(`?<Constant "a">` >> 8) & 0xff
   \   00020E   7900         MOV     R1,#0x0
   \   000210   12....       LCALL   ??HalUARTWrite?relay
    617          			if(q[3]=='1'&&q[8]=='0')m=3;
   \                     ??SampleApp_MessageMSGCB_8:
   \   000213   8E82         MOV     DPL,R6
   \   000215   8F83         MOV     DPH,R7
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   6431         XRL     A,#0x31
   \   00021D   7017         JNZ     ??SampleApp_MessageMSGCB_0
   \   00021F   8E82         MOV     DPL,R6
   \   000221   8F83         MOV     DPH,R7
   \   000223   A3           INC     DPTR
   \   000224   A3           INC     DPTR
   \   000225   A3           INC     DPTR
   \   000226   A3           INC     DPTR
   \   000227   A3           INC     DPTR
   \   000228   A3           INC     DPTR
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   6430         XRL     A,#0x30
   \   00022E   7006         JNZ     ??SampleApp_MessageMSGCB_0
   \   000230   90....       MOV     DPTR,#m
   \   000233   7403         MOV     A,#0x3
   \   000235   F0           MOVX    @DPTR,A
    618                  //if(pkt->cmd.Data[0]=='1')
    619          		//HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
    620          		break;
    621            }
    622          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000236   7419         MOV     A,#0x19
   \   000238   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023B   02....       LJMP    ?Subroutine1 & 0xFFFF
    623          
    624          /*********************************************************************
    625           * @fn      SampleApp_SendPeriodicMessage
    626           *
    627           * @brief   Send the periodic message.
    628           *
    629           * @param   none
    630           *
    631           * @return  none
    632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    634          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    635            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    636                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    637                                 1,
    638                                 (uint8*)&SampleAppPeriodicCounter,
    639                                 &SampleApp_TransID,
    640                                 AF_DISCV_ROUTE,
    641                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000040   80..         SJMP    ??Subroutine34_0
    642            {
    643            }
    644            else
    645            {
    646              // Error occurred in request to send.
    647            }
    648          }
    649          
    650          /*********************************************************************
    651           * @fn      SampleApp_SendFlashMessage
    652           *
    653           * @brief   Send the flash message to group 1.
    654           *
    655           * @param   flashTime - in milliseconds
    656           *
    657           * @return  none
    658           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    659          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    660          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    661            uint8 buffer[3];
    662            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    663            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    664            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    665          
    666            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    667                                 SAMPLEAPP_FLASH_CLUSTERID,
    668                                 3,
    669                                 buffer,
    670                                 &SampleApp_TransID,
    671                                 AF_DISCV_ROUTE,
    672                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    673            {
    674            }
    675            else
    676            {
    677              // Error occurred in request to send.
    678            }
    679          }
   \   00006F   7403         MOV     A,#0x3
   \   000071   80..         SJMP    ??Subroutine34_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for c>`:
   \   000000   71           DB 113
   \   000001   33           DB 51
   \   000002   31           DB 49

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendKongkouInfor?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendKongkouInfor

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Message error\\n">`:
   \   000000   4D657373     DB "Message error\012"
   \            61676520
   \            6572726F
   \            720A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "/n">`:
   \   000000   2F6E00       DB "/n"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "a">`:
   \   000000   6100         DB "a"
    680          
    681          /*********************************************************************
    682          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     72
       -> HalUARTWrite                  0      0     44
       -> HalUARTWrite                  0      0     44
       -> AF_DataRequest                0      0     62
       -> HalUARTWrite                  0      0     44
       -> HalUARTWrite                  0      0     44
       -> AF_DataRequest                0      0     62
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> osal_set_event                0      0     22
       -> osal_set_event                0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
     SampleApp_MessageMSGCB             1      0     86
       -> HalLedBlink                   0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> AF_DataRequest                0      0     90
       -> HalUARTWrite                  0      0     72
     SampleApp_ProcessEvent             2      0     50
       -> osal_msg_receive              0      0     82
       -> AF_DataRequest                0      0    100
       -> AF_DataRequest                0      0    100
       -> osal_msg_deallocate           0      0     82
       -> osal_msg_receive              0      0     82
       -> SampleApp_HandleKeys          0      0     82
       -> SampleApp_MessageMSGCB        0      0     82
       -> osal_start_timerEx            0      0     82
       -> SampleApp_SendPeriodicMessage
                                        0      0     82
       -> osal_rand                     0      0     82
       -> osal_start_timerEx            0      0     82
       -> DHT11                         0      0     82
       -> HalUARTWrite                  0      0     82
       -> HalUARTWrite                  0      0     82
       -> AF_DataRequest                0      0    100
       -> HalLedSet                     0      0     82
       -> HalLedSet                     0      0     82
       -> HalLedSet                     0      0     82
       -> osal_start_timerEx            0      0     82
       -> HalLedSet                     0      0     82
       -> HalLedSet                     0      0     82
       -> osal_start_timerEx            0      0     82
     SampleApp_SendFlashMessage         1      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     60
       -> AF_DataRequest                0      0     38
     SendKongkouInfor                   0      0     31
       -> AF_DataRequest                0      0     62


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     P0SEL                                    1
     SampleApp_ClusterList                    6
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     fire                                     1
     jiaoyan                                  4
     T                                       13
     y                                        4
     r                                        1
     h                                        1
     c                                        3
     m                                        1
     SendKongkouInfor                        88
     ?Subroutine12                            4
     ??Subroutine28_0                         6
     ?Subroutine3                             9
     ?Subroutine20                           15
     ?Subroutine0                             2
     ??Subroutine34_0                         8
     SampleApp_Init                         183
     ?Subroutine1                             5
     SampleApp_ProcessEvent                 966
     ?Subroutine17                            5
     ?Subroutine16                            4
     ??Subroutine26_0                         7
     ?Subroutine15                            4
     ?Subroutine13                            2
     ??Subroutine27_0                        11
     ?Subroutine9                             7
     ??Subroutine29_0                        18
     ?Subroutine19                           15
     ?Subroutine8                            16
     ?Subroutine6                            14
     ?Subroutine4                            11
     ?Subroutine25                           10
     ?Subroutine24                           21
     ?Subroutine18                            4
     ?Subroutine23                           11
     ?Subroutine14                           10
     ?Subroutine10                           12
     ?Subroutine22                           11
     ?Subroutine21                           10
     ??Subroutine30_0                         4
     ??Subroutine31_0                        18
     ?Subroutine7                             8
     ?Subroutine5                             6
     ??Subroutine32_0                        10
     ?Subroutine2                             4
     ??Subroutine33_0                        10
     SampleApp_HandleKeys                   360
     ?Subroutine11                           16
     SampleApp_MessageMSGCB                 574
     SampleApp_SendPeriodicMessage           66
     SampleApp_SendFlashMessage             115
     ?<Initializer for c>                     3
     ??SendKongkouInfor?relay                 6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "Message error\n">           15
     ?<Constant "\n">                         2
     ?<Constant "/n">                         3
     ?<Constant "a">                          2

 
 2 680 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_I
     3 bytes in segment XDATA_ID
    48 bytes in segment XDATA_ROM_C
    78 bytes in segment XDATA_Z
 
 2 725 bytes of CODE  memory
    48 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    81 bytes of XDATA memory

Errors: none
Warnings: 7
